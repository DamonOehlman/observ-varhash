// Generated by CoffeeScript 1.7.1
(function() {
  var Observ, ObservVarhash, Tombstone, checkKey, diff, extend, getKeyError, methods, watch;

  Observ = require('observ');

  extend = require('xtend');

  ObservVarhash = function(hash, createValue) {
    var initialState, k, key, obs, observ, v, _ref;
    createValue || (createValue = function(obj) {
      return obj;
    });
    initialState = {};
    for (key in hash) {
      observ = hash[key];
      checkKey(key);
      initialState[key] = (typeof observ === "function" ? observ() : void 0) || observ;
    }
    obs = Observ(initialState);
    obs._removeListeners = {};
    _ref = methods(createValue);
    for (k in _ref) {
      v = _ref[k];
      obs[k] = v;
    }
    for (key in hash) {
      observ = hash[key];
      obs[key] = createValue(observ, key);
      obs._removeListeners[key] = typeof obs[key] === "function" ? obs[key](watch(obs, key)) : void 0;
    }
    return obs;
  };

  methods = function(createValue) {
    return {
      get: function(key) {
        return this[key];
      },
      put: function(key, val) {
        var observ, state, _base;
        checkKey(key);
        observ = createValue(val, key);
        state = extend(this());
        state[key] = (typeof observ === "function" ? observ() : void 0) || observ;
        if (typeof (_base = this._removeListeners)[key] === "function") {
          _base[key]();
        }
        this._removeListeners[key] = typeof observ === "function" ? observ(watch(this, key)) : void 0;
        state._diff = diff(key, state[key]);
        this.set(state);
        this[key] = observ;
        return this;
      },
      "delete": function(key) {
        var state, _base;
        state = extend(this());
        if (typeof (_base = this._removeListeners)[key] === "function") {
          _base[key]();
        }
        delete this._removeListeners[key];
        delete state[key];
        state._diff = diff(key, ObservVarhash.Tombstone);
        this.set(state);
        return this;
      }
    };
  };

  watch = function(obs, key) {
    return function(value) {
      var state;
      state = extend(obs());
      state[key] = value;
      state._diff = diff(key, value);
      return obs.set(state);
    };
  };

  diff = function(key, value) {
    var obj;
    obj = {};
    obj[key] = value && value._diff ? value._diff : value;
    return obj;
  };

  checkKey = function(key) {
    var msg;
    if (msg = getKeyError(key)) {
      throw new Error(msg);
    }
  };

  getKeyError = function(key) {
    var reason;
    reason = (function() {
      switch (key) {
        case 'name':
          return 'Clashes with `Function.prototype.name`.';
        case 'get':
        case 'put':
        case 'delete':
        case '_removeListeners':
          return 'Clashes with observ-varhash method';
      }
    })();
    if (!reason) {
      return '';
    }
    return "cannot create an observ-varhash with key `" + key + "`, " + reason;
  };

  Tombstone = function() {
    this.toString = function() {
      return '[object Tombstone]';
    };
    return this.toJSON = function() {
      return '[object Tombstone]';
    };
  };

  ObservVarhash.Tombstone = new Tombstone();

  module.exports = ObservVarhash;

}).call(this);
